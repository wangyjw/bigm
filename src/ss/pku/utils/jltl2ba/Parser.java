/* Generated By:JavaCC: Do not edit this line. Parser.java */
package ss.pku.utils.jltl2ba;

import java.io.*;

class Parser implements ParserConstants {

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Syntactic Analysis
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//==============================================================================
// Never Claims
//==============================================================================
  final public void neverClaim(HighLevel.Callback callback, HighLevel.CallersSubstitute.NeverClaim neverClaimSubstitute) throws ParseException {
    jj_consume_token(NEVER);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      bundle(callback, neverClaimSubstitute);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCEPT_ALL:
      case ACCEPT_INIT:
      case ACCEPT_Sj:
      case Ti_Sj:
      case Ti_INIT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
  }

//==============================================================================
// State Specifications
//==============================================================================
  final public void bundle(HighLevel.Callback callback, HighLevel.CallersSubstitute.NeverClaim neverClaimSubstitute) throws ParseException {
    HighLevel.CallersSubstitute.Bundle bundleSubstitute;
    HighLevel.CallersSubstitute.State sourceStateSubstitute;
    sourceStateSubstitute = state(callback);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZKIP:
      jj_consume_token(ZKIP);
      bundleSubstitute
          = callback.newSkippingBundleSubstitute(sourceStateSubstitute);
      break;
    case IF:
      jj_consume_token(IF);
      bundleSubstitute
          = callback.newBundleSubstitute(sourceStateSubstitute);
      label_2:
      while (true) {
        transition(callback, (HighLevel.CallersSubstitute.Bundle.WithTransitions) bundleSubstitute);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CCOLON:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(FI);
      jj_consume_token(SEMICOLON);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      bundleSubstitute
          = callback.newDeadEndBundleSubstitute(sourceStateSubstitute);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    neverClaimSubstitute.add(bundleSubstitute);
  }

//==============================================================================
// Transitions
//==============================================================================
  final public void transition(HighLevel.Callback callback, HighLevel.CallersSubstitute.Bundle.WithTransitions bundleSubstitute) throws ParseException {
    Object guardSubstitute;
    HighLevel.CallersSubstitute.State targetStateSubstitute;
    jj_consume_token(CCOLON);
    guardSubstitute = guard(callback);
    jj_consume_token(ARROW);
    jj_consume_token(GOTO);
    targetStateSubstitute = state(callback);
    bundleSubstitute.add(callback.newTransitionSubstitute(guardSubstitute, targetStateSubstitute));
  }

//==============================================================================
// States
//==============================================================================
  final public HighLevel.CallersSubstitute.State state(HighLevel.Callback callback) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACCEPT_ALL:
      jj_consume_token(ACCEPT_ALL);
      {if (true) return callback.newStateAcceptAllSubstitute(getToken(0).image);}
      break;
    case ACCEPT_INIT:
      jj_consume_token(ACCEPT_INIT);
      {if (true) return callback.newStateAcceptInitSubstitute(getToken(0).image);}
      break;
    case ACCEPT_Sj:
      jj_consume_token(ACCEPT_Sj);
      {if (true) return callback.newStateAcceptSjSubstitute(getToken(0).image);}
      break;
    case Ti_Sj:
      jj_consume_token(Ti_Sj);
      {if (true) return callback.newStateTiSjSubstitute(getToken(0).image);}
      break;
    case Ti_INIT:
      jj_consume_token(Ti_INIT);
      {if (true) return callback.newStateTiInitSubstitute(getToken(0).image);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//==============================================================================
// Guards
//==============================================================================
  final public HighLevel.CallersSubstitute.Guard guard(HighLevel.Callback callback) throws ParseException {
    {if (true) return guard0(callback);}
    throw new Error("Missing return statement in function");
  }

  final public HighLevel.CallersSubstitute.Guard guard0(HighLevel.Callback callback) throws ParseException {
    HighLevel.CallersSubstitute.Guard arg1;
    HighLevel.CallersSubstitute.Guard arg2;
    arg1 = guard1(callback);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BBAR:
      jj_consume_token(BBAR);
      arg2 = guard0(callback);
      {if (true) return callback.newGuardDisjunctionSubstitute(arg1, arg2);}
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

  final public HighLevel.CallersSubstitute.Guard guard1(HighLevel.Callback callback) throws ParseException {
    HighLevel.CallersSubstitute.Guard arg1;
    HighLevel.CallersSubstitute.Guard arg2;
    arg1 = guard2(callback);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AAMPERSAND:
      jj_consume_token(AAMPERSAND);
      arg2 = guard1(callback);
      {if (true) return callback.newGuardConjunctionSubstitute(arg1, arg2);}
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

  final public HighLevel.CallersSubstitute.Guard guard2(HighLevel.Callback callback) throws ParseException {
    HighLevel.CallersSubstitute.Guard arg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
      arg = guard2(callback);
      {if (true) return callback.newGuardNegationSubstitute(arg);}
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    arg = guard3(callback);
    {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public HighLevel.CallersSubstitute.Guard guard3(HighLevel.Callback callback) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM_k:
      jj_consume_token(ATOM_k);
    {if (true) return callback.newGuardAtomSubstitute(HighLevel.Input.toInputAtom(getToken(0).image));}
      break;
    case ONE:
      jj_consume_token(ONE);
    {if (true) return callback.newGuardTruthhoodSubstitute();}
      break;
    case LPARENTHESIS:
    HighLevel.CallersSubstitute.Guard arg;
      jj_consume_token(LPARENTHESIS);
      arg = guard(callback);
      jj_consume_token(RPARENTHESIS);
    {if (true) return arg;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0000600,0x400000,0x14800,0xe0000600,0x4000000,0x8000000,0x10000000,0x1080000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    // no extra code
}
